import logging
import json
import os

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
)

USERS_FILE = 'users.json'
REVIEWS_FILE = 'reviews.json'

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

(
    CHOOSE_GENDER,
    ENTER_AGE,
    ENTER_ABOUT,
    CHOOSE_TARGET_GENDER,
    ENTER_AGE_RANGE,
    UPLOAD_PHOTO,
) = range(6)

(
    EDIT_CHOOSE_FIELD,
    EDIT_FIELD,
) = range(6, 8)

(
    REVIEW_ENTER_TARGET,
    REVIEW_ENTER_TEXT,
) = range(8, 10)

def load_json(filename, default):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    return default

def save_json(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_users_list():
    return load_json(USERS_FILE, [])

def set_users_list(users):
    save_json(USERS_FILE, users)

def get_reviews():
    return load_json(REVIEWS_FILE, {})

def set_reviews(reviews):
    save_json(REVIEWS_FILE, reviews)

def find_user_by_id(user_id):
    users_list = get_users_list()
    for u in users_list:
        if u['user_id'] == user_id:
            return u
    return None

def find_user_by_username(username):
    users_list = get_users_list()
    username = username.lstrip('@').lower()
    for u in users_list:
        if 'username' in u and u['username'].lower() == username:
            return u
    return None

# --- –î–æ–±–∞–≤–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–∞–π–∫–æ–≤ –≤ –ø–∞–º—è—Ç—å (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ---
# –§–æ—Ä–º–∞—Ç: {user_id: set(user_id_–∫–æ—Ç–æ—Ä—ã–º –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫)}
LIKES_FILE = 'likes.json'

def get_likes():
    return load_json(LIKES_FILE, {})

def set_likes(data):
    save_json(LIKES_FILE, data)

def add_like(from_user_id, to_user_id):
    likes = get_likes()
    str_from = str(from_user_id)
    str_to = str(to_user_id)
    if str_from not in likes:
        likes[str_from] = []
    if str_to not in likes[str_from]:
        likes[str_from].append(str_to)
    set_likes(likes)

def check_mutual_like(user1_id, user2_id):
    likes = get_likes()
    str_user1 = str(user1_id)
    str_user2 = str(user2_id)
    return (str_user1 in likes and str_user2 in likes[str_user1]) and (str_user2 in likes and str_user1 in likes[str_user2])

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "–ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"],
        ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"],
        ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await main_menu(update, context)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text == "—Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        reply_keyboard = [['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π', '–¥—Ä—É–≥–æ–π']]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        )
        return CHOOSE_GENDER
    elif text == "–∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        return await search(update, context)
    elif text == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        return await edit(update, context)
    elif text == "–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        return await review_start(update, context)
    elif text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã":
        return await show_reviews(update, context)
    else:
        await main_menu(update, context)
        return

# --- –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã ---

async def choose_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gender = update.message.text.lower()
    if gender not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π', '–¥—Ä—É–≥–æ–π']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return CHOOSE_GENDER
    context.user_data['gender'] = gender.capitalize()
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
    return ENTER_AGE

async def enter_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age < 13 or age > 120:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 13 –¥–æ 120).")
            return ENTER_AGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return ENTER_AGE
    context.user_data['age'] = age
    await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤):")
    return ENTER_ABOUT

async def enter_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about = update.message.text
    context.user_data['about'] = about
    reply_keyboard = [['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π', '–ª—é–±–æ–π']]
    await update.message.reply_text(
        "–ö–∞–∫–æ–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ç—ã –∏—â–µ—à—å?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return CHOOSE_TARGET_GENDER

async def choose_target_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target_gender = update.message.text.lower()
    if target_gender not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π', '–ª—é–±–æ–π']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return CHOOSE_TARGET_GENDER
    context.user_data['target_gender'] = target_gender.capitalize()
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏—Å–∫–æ–º–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20-30):",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ENTER_AGE_RANGE

async def enter_age_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        parts = text.split('-')
        if len(parts) != 2:
            raise ValueError
        age_min = int(parts[0])
        age_max = int(parts[1])
        if not (13 <= age_min <= age_max <= 120):
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 20-30")
        return ENTER_AGE_RANGE
    context.user_data['age_min'] = age_min
    context.user_data['age_max'] = age_max
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ (–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∞ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ) –∏–ª–∏ –Ω–∞–∂–º–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    return UPLOAD_PHOTO

async def upload_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        photo = update.message.photo[-1]
        context.user_data['photo_id'] = photo.file_id
    else:
        context.user_data['photo_id'] = None

    username = update.message.from_user.username
    if username:
        context.user_data['username'] = username

    user_id = update.message.from_user.id
    users_list = get_users_list()
    found = False
    for u in users_list:
        if u['user_id'] == user_id:
            u.update(context.user_data)
            found = True
            break
    if not found:
        new_user = context.user_data.copy()
        new_user['user_id'] = user_id
        users_list.append(new_user)
    set_users_list(users_list)

    await update.message.reply_text(
        "–ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.\n"
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "–ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"],
                ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"],
                ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"]
            ], resize_keyboard=True)
    )
    return ConversationHandler.END

async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['photo_id'] = None
    return await upload_photo(update, context)

# --- –ü–æ–∏—Å–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç —Å –ª–∞–π–∫–∞–º–∏ –∏ –æ—Ç–∑—ã–≤–∞–º–∏ ---

async def show_profile(update_obj, context, profiles, index):
    if index >= len(profiles):
        if hasattr(update_obj, 'callback_query') and update_obj.callback_query:
            await update_obj.callback_query.edit_message_text("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        else:
            await update_obj.message.reply_text("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return

    profile = profiles[index]
    text = (
        f"–ü–æ–ª: {profile['gender']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
        f"–û —Å–µ–±–µ: {profile['about']}\n"
    )
    keyboard = [
        [
            InlineKeyboardButton("üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"like_{index}"),
            InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{index}")
        ],
        [
            InlineKeyboardButton("–û—Ç–∑—ã–≤—ã", callback_data=f"reviews_{index}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if 'photo_id' in profile and profile['photo_id']:
        if hasattr(update_obj, 'callback_query') and update_obj.callback_query:
            await update_obj.callback_query.edit_message_media(
                media=InputMediaPhoto(profile['photo_id'], caption=text),
                reply_markup=reply_markup
            )
        else:
            await update_obj.message.reply_photo(
                photo=profile['photo_id'],
                caption=text,
                reply_markup=reply_markup
            )
    else:
        if hasattr(update_obj, 'callback_query') and update_obj.callback_query:
            await update_obj.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update_obj.message.reply_text(text, reply_markup=reply_markup)

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = find_user_by_id(user_id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É.")
        return ConversationHandler.END
    users_list = get_users_list()
    results = [
        u for u in users_list
        if u['user_id'] != user_id and
           (user['target_gender'].lower() == '–ª—é–±–æ–π' or u['gender'].lower() == user['target_gender'].lower()) and
           (user['age_min'] <= u['age'] <= user['age_max'])
    ]
    if not results:
        await update.message.reply_text("–ü–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END
    context.user_data['search_results'] = results
    context.user_data['search_index'] = 0
    await show_profile(update, context, results, 0)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    index = context.user_data.get('search_index', 0)
    results = context.user_data.get('search_results', [])
    if not results:
        await query.edit_message_text("–ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞.")
        return

    if data.startswith("like_"):
        # –õ–∞–π–∫–Ω—É–ª–∏ –∞–Ω–∫–µ—Ç—É —Å –∏–Ω–¥–µ–∫—Å–æ–º
        liked_index = int(data.split('_')[1])
        liked_user = results[liked_index]
        liker_id = query.from_user.id
        liked_id = liked_user['user_id']

        add_like(liker_id, liked_id)
        await query.answer("–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        if check_mutual_like(liker_id, liked_id):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            liker = find_user_by_id(liker_id)
            liked = find_user_by_id(liked_id)
            if liker and liked:
                liker_name = liker.get('username') or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {liker_id}"
                liked_name = liked.get('username') or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {liked_id}"

                try:
                    await context.bot.send_message(
                        chat_id=liker_id,
                        text=f"–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å @{liked_name}! –í–æ—Ç –µ–≥–æ –∞–Ω–∫–µ—Ç–∞:\n"
                             f"–ü–æ–ª: {liked['gender']}\n–í–æ–∑—Ä–∞—Å—Ç: {liked['age']}\n–û —Å–µ–±–µ: {liked['about']}\nTelegram: @{liked.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
                    )
                    await context.bot.send_message(
                        chat_id=liked_id,
                        text=f"–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å @{liker_name}! –í–æ—Ç –µ–≥–æ –∞–Ω–∫–µ—Ç–∞:\n"
                             f"–ü–æ–ª: {liker['gender']}\n–í–æ–∑—Ä–∞—Å—Ç: {liker['age']}\n–û —Å–µ–±–µ: {liker['about']}\nTelegram: @{liker.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ: {e}")

        index = liked_index + 1
        context.user_data['search_index'] = index
        if index < len(results):
            await show_profile(query, context, results, index)
        else:
            await query.edit_message_text("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")

    elif data.startswith("skip_"):
        skip_index = int(data.split('_')[1])
        await query.answer("–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        index = skip_index + 1
        context.user_data['search_index'] = index
        if index < len(results):
            await show_profile(query, context, results, index)
        else:
            await query.edit_message_text("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")

    elif data.startswith("reviews_"):
        rev_index = int(data.split('_')[1])
        profile = results[rev_index]
        username = profile.get('username')
        if not username:
            await query.answer("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username, –æ—Ç–∑—ã–≤—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", show_alert=True)
            return
        reviews = get_reviews()
        user_reviews = reviews.get(username.lower(), [])
        if not user_reviews:
            text = "–û—Ç–∑—ã–≤–æ–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "–û—Ç–∑—ã–≤—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n" + "\n\n".join(user_reviews)
        try:
            await query.answer()
            await query.message.reply_text(text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ---

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = find_user_by_id(update.message.from_user.id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É.")
        return ConversationHandler.END
    reply_keyboard = [
        ['–ü–æ–ª', '–í–æ–∑—Ä–∞—Å—Ç'],
        ['–û —Å–µ–±–µ', '–ò—Å–∫–æ–º—ã–π –ø–æ–ª'],
        ['–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω', '–§–æ—Ç–æ'],
        ['–û—Ç–º–µ–Ω–∞']
    ]
    await update.message.reply_text(
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return EDIT_CHOOSE_FIELD

async def edit_choose_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.lower()
    if choice == '–æ—Ç–º–µ–Ω–∞':
        await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    fields_map = {
        '–ø–æ–ª': 'gender',
        '–≤–æ–∑—Ä–∞—Å—Ç': 'age',
        '–æ —Å–µ–±–µ': 'about',
        '–∏—Å–∫–æ–º—ã–π –ø–æ–ª': 'target_gender',
        '–≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω': 'age_range',
        '—Ñ–æ—Ç–æ': 'photo'
    }
    if choice not in fields_map:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return EDIT_CHOOSE_FIELD
    context.user_data['edit_field'] = fields_map[choice]
    field = fields_map[choice]
    if field == 'age_range':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏—Å–∫–æ–º–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20-30):")
    elif field == 'gender':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª: –ú—É–∂—Å–∫–æ–π, –ñ–µ–Ω—Å–∫–∏–π, –î—Ä—É–≥–æ–π")
    elif field == 'target_gender':
        await update.message.reply_text("–ö–∞–∫–æ–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤—ã –∏—â–µ—Ç–µ? –ú—É–∂—Å–∫–æ–π, –ñ–µ–Ω—Å–∫–∏–π, –õ—é–±–æ–π")
    elif field == 'age':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    elif field == 'about':
        await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")
    elif field == 'photo':
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ /skip —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:")
        return EDIT_FIELD
    return EDIT_FIELD

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field = context.user_data.get('edit_field')
    user_id = update.message.from_user.id
    users_list = get_users_list()
    user = next((u for u in users_list if u['user_id'] == user_id), None)
    if not user:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    if field == 'photo':
        if update.message.photo:
            photo = update.message.photo[-1]
            user['photo_id'] = photo.file_id
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip")
            return EDIT_FIELD
    else:
        text = update.message.text.strip()
        text_lower = text.lower()
        if field == 'gender':
            if text_lower not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π', '–¥—Ä—É–≥–æ–π']:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ú—É–∂—Å–∫–æ–π, –ñ–µ–Ω—Å–∫–∏–π –∏–ª–∏ –î—Ä—É–≥–æ–π")
                return EDIT_FIELD
            user['gender'] = text.capitalize()
        elif field == 'target_gender':
            if text_lower not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π', '–ª—é–±–æ–π']:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ú—É–∂—Å–∫–æ–π, –ñ–µ–Ω—Å–∫–∏–π –∏–ª–∏ –õ—é–±–æ–π")
                return EDIT_FIELD
            user['target_gender'] = text.capitalize()
        elif field == 'age':
            try:
                age = int(text)
                if age < 13 or age > 120:
                    raise ValueError
                user['age'] = age
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 13 –¥–æ 120):")
                return EDIT_FIELD
        elif field == 'about':
            user['about'] = text
        elif field == 'age_range':
            try:
                parts = text.split('-')
                if len(parts) != 2:
                    raise ValueError
                age_min = int(parts[0])
                age_max = int(parts[1])
                if not (13 <= age_min <= age_max <= 120):
                    raise ValueError
                user['age_min'] = age_min
                user['age_max'] = age_max
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 20-30")
                return EDIT_FIELD

    set_users_list(users_list)
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=ReplyKeyboardRemove())
    await main_menu(update, context)
    return ConversationHandler.END

async def skip_photo_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    users_list = get_users_list()
    for u in users_list:
        if u['user_id'] == user_id:
            u['photo_id'] = None
            break
    set_users_list(users_list)
    await update.message.reply_text("–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è!", reply_markup=ReplyKeyboardRemove())
    await main_menu(update, context)
    return ConversationHandler.END

# --- –û—Ç–∑—ã–≤—ã ---

async def review_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
    return REVIEW_ENTER_TARGET

async def review_enter_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip()
    context.user_data['review_target'] = username
    await update.message.reply_text(f"–í—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:")
    return REVIEW_ENTER_TEXT

async def review_enter_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    username = context.user_data.get('review_target')
    if not username:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        return ConversationHandler.END
    reviews = get_reviews()
    key = username.lower()
    if key not in reviews:
        reviews[key] = []
    reviews[key].append(text)
    set_reviews(reviews)
    await update.message.reply_text("–í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=ReplyKeyboardRemove())
    await main_menu(update, context)
    return ConversationHandler.END

async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.from_user.username
    if not username:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç username.")
        return
    reviews = get_reviews()
    user_reviews = reviews.get(username.lower(), [])
    if not user_reviews:
        await update.message.reply_text("–û—Ç–∑—ã–≤–æ–≤ –æ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        await update.message.reply_text("–û—Ç–∑—ã–≤—ã –æ –≤–∞—Å:\n" + "\n\n".join(user_reviews))
    await main_menu(update, context)
    return

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def main():
    application = Application.builder().token("8121277507:AAEvqSpC30D6kQzU1-ACkDgJ5FLomy7DKnc").build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^(–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É|–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å|–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤|–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã|–ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞)$"), handle_menu),
        ],
        states={
            CHOOSE_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_gender)],
            ENTER_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_age)],
            ENTER_ABOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_about)],
            CHOOSE_TARGET_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_target_gender)],
            ENTER_AGE_RANGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_age_range)],
            UPLOAD_PHOTO: [
                MessageHandler(filters.PHOTO, upload_photo),
                CommandHandler("skip", skip_photo)
            ],
            EDIT_CHOOSE_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_choose_field)],
            EDIT_FIELD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_field),
                MessageHandler(filters.PHOTO, edit_field),
                CommandHandler("skip", skip_photo_edit)
            ],
            REVIEW_ENTER_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_enter_target)],
            REVIEW_ENTER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_enter_text)],
        },
        fallbacks=[CommandHandler("start", start)],
        allow_reentry=True,
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()

if __name__ == "__main__":
    main()
