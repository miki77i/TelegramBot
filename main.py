import telebot
from telebot import types
import json
import os
import random


bot = telebot.TeleBot("8121277507:AAEvqSpC30D6kQzU1-ACkDgJ5FLomy7DKnc")

#–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DATA_FILE = 'users_data.json'

#–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {"users": {}, "pairs": {}}

#—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


#–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–∞
gender_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
gender_markup.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")

#–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
goal_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
goal_markup.add("–î—Ä—É–∂–±–∞", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–û–±—â–µ–Ω–∏–µ")

#/start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, 
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n"
        "–°–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É: /create_profile\n"
        "–ù–∞–π–¥–∏ –ø–∞—Ä—É: /find")

#–∞–Ω–∫–µ—Ç–∞
@bot.message_handler(commands=['create_profile'])
def create_profile(message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id in data["users"]:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞! –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å: /my_profile")
        return
    
    msg = bot.send_message(message.chat.id, 
        "–°–æ–∑–¥–∞–µ–º –∞–Ω–∫–µ—Ç—É\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n"
        "–§–æ—Ä–º–∞—Ç: –ò–º—è, –í–æ–∑—Ä–∞—Å—Ç\n"
        "–ü—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, 25",
        reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_name_age)

def process_name_age(message):
    try:
        name, age = message.text.split(', ')
        if not name or not age.isdigit():
            raise ValueError
        
        chat_id = message.chat.id
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=gender_markup)
        bot.register_next_step_handler(message, process_gender, name, age)
    except:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑: /create_profile")

def process_gender(message, name, age):
    if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –∫–Ω–æ–ø–æ–∫!")
        return
    
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, process_city, name, age, message.text)

def process_city(message, name, age, gender):
    city = message.text
    chat_id = message.chat.id
    bot.send_message(chat_id, 
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ:")
    bot.register_next_step_handler(message, process_bio, name, age, gender, city)

def process_bio(message, name, age, gender, city):
    bio = message.text
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ß—Ç–æ —Ç—ã –∏—â–µ—à—å?", reply_markup=goal_markup)
    bot.register_next_step_handler(message, process_goal, name, age, gender, city, bio)

def process_goal(message, name, age, gender, city, bio):
    if message.text not in ["–î—Ä—É–∂–±–∞", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–û–±—â–µ–Ω–∏–µ"]:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        return
    
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, process_photo, name, age, gender, city, bio, message.text)

def process_photo(message, name, age, gender, city, bio, goal):
    if not message.photo:
        bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑: /create_profile")
        return
    
    photo_id = message.photo[-1].file_id
    user_id = str(message.from_user.id)
    
#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É
    data = load_data()
    data["users"][user_id] = {
        "name": name,
        "age": age,
        "gender": gender,
        "city": city,
        "bio": bio,
        "goal": goal,
        "photo": photo_id,
        "likes": 0,
        "matches": []
    }
    save_data(data)
    

    bot.send_photo(message.chat.id, photo_id,
        caption=f"üéâ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"{name}, {age} –ª–µ—Ç\n"
                f"{gender}, {city}\n\n"
                f"{bio}\n\n"
                f"–ò—â–µ—Ç: {goal}")


@bot.message_handler(commands=['my_profile'])
def show_profile(message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id not in data["users"]:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –°–æ–∑–¥–∞–π: /create_profile")
        return
    
    profile = data["users"][user_id]
    bot.send_photo(message.chat.id, profile["photo"],
        caption=f"{profile['name']}, {profile['age']} –ª–µ—Ç\n"
                f"{profile['gender']}, {profile['city']}\n\n"
                f"{profile['bio']}\n\n"
                f"–õ–∞–π–∫–æ–≤: {profile['likes']}\n"
                f"–í–∑–∞–∏–º–Ω–æ—Å—Ç—å: {len(profile['matches'])}\n"
                f"–ò—â–µ—Ç: {profile['goal']}")

# –ü–æ–∏—Å–∫
@bot.message_handler(commands=['find'])
def find_pair(message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id not in data["users"]:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É: /create_profile")
        return
    
    viewed = data["pairs"].get(user_id, []) + [user_id]
    available = [uid for uid in data["users"] if uid not in viewed]
    
    if not available:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        return
    
    partner_id = random.choice(available)
    partner = data["users"][partner_id]
    

    if user_id not in data["pairs"]:
        data["pairs"][user_id] = []
    data["pairs"][user_id].append(partner_id)
    save_data(data)
    
    #–∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    like_btn = types.InlineKeyboardButton("–õ–∞–π–∫", callback_data=f"like_{partner_id}")
    skip_btn = types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{partner_id}")
    markup.add(like_btn, skip_btn)
    
    bot.send_photo(message.chat.id, partner["photo"],
        caption=f"{partner['name']}, {partner['age']} –ª–µ—Ç\n"
                f"{partner['gender']}, {partner['city']}\n\n"
                f"{partner['bio']}\n\n"
                f"–ò—â–µ—Ç: {partner['goal']}",
        reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith(('like_', 'skip_')))
def handle_callback(call):
    user_id = str(call.from_user.id)
    partner_id = call.data.split('_')[1]
    data = load_data()
    
    if call.data.startswith('like_'):

        data["users"][partner_id]["likes"] += 1
        

        if user_id in data["users"][partner_id].get("liked_by", []):


            data["users"][user_id]["matches"].append(partner_id)
            data["users"][partner_id]["matches"].append(user_id)
            
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption="–≠—Ç–æ –≤–∑–∞–∏–º–Ω–æ! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É!")
            

            partner = data["users"][partner_id]
            bot.send_message(
                partner_id,
                f"–≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é —Å {data['users'][user_id]['name']}!\n"
                f"–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç: @{call.from_user.username}" if call.from_user.username else "")
        else:

            if "liked_by" not in data["users"][partner_id]:
                data["users"][partner_id]["liked_by"] = []
            data["users"][partner_id]["liked_by"].append(user_id)
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption="–¢–≤–æ–π –ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    elif call.data.startswith('skip_'):
        bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption="–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    
    save_data(data)



if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()

# @bot.message_handler(commands=["start_chat"])
# def