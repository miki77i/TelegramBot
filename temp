import logging
import sqlite3
from datetime import datetime

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
)

# Настройка логирования
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Константы для состояний ConversationHandler
(
    CHOOSE_GENDER,
    ENTER_AGE,
    ENTER_ABOUT,
    CHOOSE_TARGET_GENDER,
    ENTER_AGE_RANGE,
    UPLOAD_PHOTO,
    EDIT_CHOOSE_FIELD,
    EDIT_FIELD,
    REVIEW_ENTER_TARGET,
    REVIEW_ENTER_TEXT,
) = range(10)

# Имя файла базы данных
DATABASE_FILE = 'database'

class Database:
    def __init__(self, db_file=DATABASE_FILE):
        self.db_file = db_file
        self._initialize_db()

    def _initialize_db(self):
        """Инициализация базы данных и создание таблиц"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            
            # Таблица пользователей
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    gender TEXT,
                    age INTEGER,
                    about TEXT,
                    target_gender TEXT,
                    age_min INTEGER,
                    age_max INTEGER,
                    photo_id TEXT
                    
                )
            ''')
            
            # Таблица лайков
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS likes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    from_user_id INTEGER,
                    to_user_id INTEGER,
                    UNIQUE(from_user_id, to_user_id))
            ''')
            
            # Таблица отзывов
           # cursor.execute('''
            #    CREATE TABLE IF NOT EXISTS reviews (
             #       id INTEGER PRIMARY KEY AUTOINCREMENT,
              #      target_username TEXT NOT NULL,
               #     text TEXT NOT NULL
                #)
            #''')
            
            #conn.commit()

    def add_user(self, user_id, username, first_name, last_name):
        """Добавление нового пользователя"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
            ''', (user_id, username, first_name, last_name))
            conn.commit()

    def get_user(self, user_id):
        """Получение пользователя по ID"""
        with sqlite3.connect(self.db_file) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            return cursor.fetchone()

    def update_user(self, user_id, **fields):
        """Обновление данных пользователя"""
        if not fields:
            return
            
        set_clause = ', '.join([f"{key} = ?" for key in fields.keys()])
        values = list(fields.values())
        values.append(user_id)
        
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            cursor.execute(f'''
                UPDATE users SET {set_clause} WHERE user_id = ?
            ''', values)
            conn.commit()

    def get_all_users(self):
        """Получение всех пользователей"""
        with sqlite3.connect(self.db_file) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users')
            return cursor.fetchall()

    def add_like(self, from_user_id, to_user_id):
        """Добавление лайка"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            try:
                cursor.execute('''
                    INSERT INTO likes (from_user_id, to_user_id)
                    VALUES (?, ?)
                ''', (from_user_id, to_user_id))
                conn.commit()
                return True
            except sqlite3.IntegrityError:
                return False

    def check_mutual_like(self, user1_id, user2_id):
        """Проверка взаимного лайка"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM likes
                WHERE (from_user_id = ? AND to_user_id = ?)
                OR (from_user_id = ? AND to_user_id = ?)
            ''', (user1_id, user2_id, user2_id, user1_id))
            return cursor.fetchone()[0] == 2

    def add_review(self, target_username, text):
        """Добавление отзыва"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO reviews (target_username, text)
                VALUES (?, ?)
            ''', (target_username.lower(), text))
            conn.commit()

    def get_reviews(self, username):
        """Получение отзывов о пользователе"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT text FROM reviews
                WHERE target_username = ?
                
            ''', (username.lower(),))
            return [row[0] for row in cursor.fetchall()]

# Инициализация базы данных
db = Database()

# --- Главное меню ---

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["Создать/обновить анкету", "Искать собеседника"],
        ["Редактировать профиль", "Оставить отзыв"],
        ["Посмотреть отзывы"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if update.message:
        await update.message.reply_text("Выберите действие:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("Выберите действие:", reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    await main_menu(update, context)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if text == "создать/обновить анкету":
        reply_keyboard = [['Мужской', 'Женский', 'Другой']]
        await update.message.reply_text(
            "Выбери свой пол:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        )
        return CHOOSE_GENDER
        
    elif text == "искать собеседника":
        return await search(update, context)
        
    elif text == "редактировать профиль":
        return await edit_profile(update, context)
        
    elif text == "оставить отзыв":
        await update.message.reply_text(
            "Пока в разработке.",
           reply_markup=ReplyKeyboardRemove()
        )
        return main_menu
        
    elif text == "посмотреть отзывы":
        return await show_reviews(update, context)
        
    else:
        await main_menu(update, context)
        return ConversationHandler.END

# --- Создание/обновление анкеты ---

async def choose_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gender = update.message.text.lower()
    if gender not in ['мужской', 'женский', 'другой']:
        await update.message.reply_text("Пожалуйста, выбери пол из предложенных вариантов.")
        return CHOOSE_GENDER
        
    context.user_data['gender'] = gender.capitalize()
    await update.message.reply_text("Сколько тебе лет?", reply_markup=ReplyKeyboardRemove())
    return ENTER_AGE

async def enter_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age < 13 or age > 120:
            await update.message.reply_text("Пожалуйста, введи корректный возраст (от 13 до 120).")
            return ENTER_AGE
    except ValueError:
        await update.message.reply_text("Пожалуйста, введи число.")
        return ENTER_AGE
        
    context.user_data['age'] = age
    await update.message.reply_text("Расскажи немного о себе (несколько слов):")
    return ENTER_ABOUT

async def enter_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about = update.message.text
    context.user_data['about'] = about
    reply_keyboard = [['Мужской', 'Женский', 'Любой']]
    await update.message.reply_text(
        "Какой пол собеседника ты ищешь?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return CHOOSE_TARGET_GENDER

async def choose_target_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target_gender = update.message.text.lower()
    if target_gender not in ['мужской', 'женский', 'любой']:
        await update.message.reply_text("Пожалуйста, выбери пол собеседника из предложенных вариантов.")
        return CHOOSE_TARGET_GENDER
        
    context.user_data['target_gender'] = target_gender.capitalize()
    await update.message.reply_text(
        "Введите минимальный и максимальный возраст искомого собеседника через дефис (например, 20-30):",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ENTER_AGE_RANGE

async def enter_age_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        parts = text.split('-')
        if len(parts) != 2:
            raise ValueError
        age_min = int(parts[0])
        age_max = int(parts[1])
        if not (13 <= age_min <= age_max <= 120):
            raise ValueError
    except ValueError:
        await update.message.reply_text("Пожалуйста, введи корректный диапазон в формате: 20-30")
        return ENTER_AGE_RANGE
        
    context.user_data['age_min'] = age_min
    context.user_data['age_max'] = age_max
    await update.message.reply_text(
        "Отправь свое фото (не документ, а именно фото) или нажми /skip чтобы пропустить:"
    )
    return UPLOAD_PHOTO

async def upload_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        photo = update.message.photo[-1]
        context.user_data['photo_id'] = photo.file_id
    else:
        context.user_data['photo_id'] = None

    user_id = update.message.from_user.id
    username = update.message.from_user.username
    
    # Обновляем данные пользователя в базе
    db.update_user(user_id, **context.user_data)
    
    if username:
        db.update_user(user_id, username=username)

    await update.message.reply_text(
        "Анкета создана/обновлена! Теперь ты можешь искать собеседников.",
        reply_markup=ReplyKeyboardRemove()
    )
    await main_menu(update, context)
    return ConversationHandler.END

async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['photo_id'] = None
    return await upload_photo(update, context)

# --- Поиск и просмотр анкет ---

async def show_profile(update_obj, context, profiles, index):
    if index >= len(profiles):
        if hasattr(update_obj, 'callback_query'):
            await update_obj.callback_query.edit_message_text("Анкеты закончились.")
        else:
            await update_obj.message.reply_text("Анкеты закончились.")
        return

    profile = dict(profiles[index])
    username = profile.get('username', 'не указан')
    
    # Получаем отзывы для этого пользователя
    user_reviews = db.get_reviews(username) if username and username != 'не указан' else []
    
    # Формируем текст анкеты
    text = (
        f"👤 {profile.get('first_name', 'Пользователь')} {profile.get('last_name', '')}\n"
        f"Пол: {profile.get('gender', 'не указан')}\n"
        f"Возраст: {profile.get('age', 'не указан')}\n"
        f"О себе: {profile.get('about', 'не указано')}\n"
    )
    
    # Добавляем отзывы, если они есть
    if user_reviews:
        text += "\n📝 Отзывы:\n"
        for i, review in enumerate(user_reviews[:3], 1):
            text += f"{i}. {review}\n"
        if len(user_reviews) > 3:
            text += f"... и ещё {len(user_reviews)-3} отзывов\n"
    
    keyboard = [
        [
            InlineKeyboardButton("👍 Нравится", callback_data=f"like_{index}"),
            InlineKeyboardButton("➡️ Пропустить", callback_data=f"skip_{index}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if profile.get('photo_id'):
        if hasattr(update_obj, 'callback_query'):
            await update_obj.callback_query.edit_message_media(
                media=InputMediaPhoto(profile['photo_id'], caption=text),
                reply_markup=reply_markup
            )
        else:
            await update_obj.message.reply_photo(
                photo=profile['photo_id'],
                caption=text,
                reply_markup=reply_markup
            )
    else:
    #     if hasattr(update_obj, 'callback_query'):
    #         await update_obj.callback_query.edit_message_text(text, reply_markup=reply_markup)
    #     else:
        await update_obj.message.reply_text(text, reply_markup=reply_markup)

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text("Сначала создай анкету.")
        return ConversationHandler.END
    
    all_users = db.get_all_users()
    results = [
        u for u in all_users
        if u['user_id'] != user_id and
           (user['target_gender'].lower() == 'любой' or u['gender'].lower() == user['target_gender'].lower()) and
           (user['age_min'] <= u['age'] <= user['age_max'])
    ]
    
    if not results:
        await update.message.reply_text("По вашим параметрам собеседников не найдено.")
        return ConversationHandler.END
    
    context.user_data['search_results'] = results
    context.user_data['search_index'] = 0
    await show_profile(update, context, results, 0)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    index = context.user_data.get('search_index', 0)
    results = context.user_data.get('search_results', [])
    
    if not results:
        await query.edit_message_text("Нет анкет для показа.")
        return

    if data.startswith("like_"):
        liked_index = int(data.split('_')[1])
        liked_user = results[liked_index]
        liker_id = query.from_user.id
        liked_id = liked_user['user_id']

        db.add_like(liker_id, liked_id)
        await query.answer("Вы поставили лайк!")

        if db.check_mutual_like(liker_id, liked_id):
            liker = db.get_user(liker_id)
            liked = db.get_user(liked_id)
            
            if liker and liked:
                liker_name = liker['username'] or f"Пользователь {liker_id}"
                liked_name = liked['username'] or f"Пользователь {liked_id}"

                try:
                    await context.bot.send_message(
                        chat_id=liker_id,
                        text=f"У вас взаимный лайк с @{liked_name}!\n"
                             f"Пол: {liked['gender']}\n"
                             f"Возраст: {liked['age']}\n"
                             f"О себе: {liked['about']}\n"
                             f"Telegram: @{liked['username']}"

                    )
                    await context.bot.send_message(
                        chat_id=liked_id,
                        text=f"У вас взаимный лайк с @{liker_name}!\n"
                             f"Пол: {liker['gender']}\n"
                             f"Возраст: {liker['age']}\n"
                             f"О себе: {liker['about']}\n"
                             f"Telegram: @{liker['username']}"
                    )
                except Exception as e:
                    logger.error(f"Ошибка при отправке уведомления: {e}")

        index = liked_index + 1
        if index < len(results):
            context.user_data['search_index'] = index
            await show_profile(query, context, results, index)
        else:
            await query.edit_message_text("Анкеты закончились.")

    elif data.startswith("skip_"):
        index = int(data.split('_')[1]) + 1
        if index < len(results):
            context.user_data['search_index'] = index
            await show_profile(query, context, results, index)
        else:
            await query.edit_message_text("Анкеты закончились.")

# --- Редактирование профиля ---

async def edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = db.get_user(update.message.from_user.id)
    if not user:
        await update.message.reply_text("Сначала создай анкету.")
        return ConversationHandler.END
        
    reply_keyboard = [
        ['Пол', 'Возраст'],
        ['О себе', 'Искомый пол'],
        ['Возрастной диапазон', 'Фото'],
        ['Отмена']
    ]
    await update.message.reply_text(
        "Что хочешь изменить?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return EDIT_CHOOSE_FIELD

async def edit_choose_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.lower()
    if choice == 'отмена':
        await update.message.reply_text("Редактирование отменено.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
        
    fields_map = {
        'пол': 'gender',
        'возраст': 'age',
        'о себе': 'about',
        'искомый пол': 'target_gender',
        'возрастной диапазон': 'age_range',
        'фото': 'photo'
    }
    
    if choice not in fields_map:
        await update.message.reply_text("Пожалуйста, выбери поле из списка.")
        return EDIT_CHOOSE_FIELD
        
    context.user_data['edit_field'] = fields_map[choice]
    field = fields_map[choice]
    
    if field == 'age_range':
        await update.message.reply_text("Введите минимальный и максимальный возраст через дефис (например, 20-30):")
    elif field == 'gender':
        await update.message.reply_text("Выберите свой пол: Мужской, Женский, Другой")
    elif field == 'target_gender':
        await update.message.reply_text("Какой пол собеседника вы ищете? Мужской, Женский, Любой")
    elif field == 'age':
        await update.message.reply_text("Введите ваш возраст:")
    elif field == 'about':
        await update.message.reply_text("Расскажите немного о себе:")
    elif field == 'photo':
        await update.message.reply_text("Отправьте новое фото или /skip чтобы удалить текущее:")
        return EDIT_FIELD
        
    return EDIT_FIELD

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field = context.user_data.get('edit_field')
    user_id = update.message.from_user.id
    update_data = {}

    if field == 'photo':
        if update.message.photo:
            photo = update.message.photo[-1]
            update_data['photo_id'] = photo.file_id
        else:
            await update.message.reply_text("Пожалуйста, отправьте фото или используйте /skip")
            return EDIT_FIELD
    else:
        text = update.message.text.strip()
        text_lower = text.lower()
        
        if field == 'gender':
            if text_lower not in ['мужской', 'женский', 'другой']:
                await update.message.reply_text("Пожалуйста, выберите: Мужской, Женский или Другой")
                return EDIT_FIELD
            update_data['gender'] = text.capitalize()
            
        elif field == 'target_gender':
            if text_lower not in ['мужской', 'женский', 'любой']:
                await update.message.reply_text("Пожалуйста, выберите: Мужской, Женский или Любой")
                return EDIT_FIELD
            update_data['target_gender'] = text.capitalize()
            
        elif field == 'age':
            try:
                age = int(text)
                if age < 13 or age > 120:
                    raise ValueError
                update_data['age'] = age
            except ValueError:
                await update.message.reply_text("Введите корректный возраст (от 13 до 120):")
                return EDIT_FIELD
                
        elif field == 'about':
            update_data['about'] = text
            
        elif field == 'age_range':
            try:
                parts = text.split('-')
                if len(parts) != 2:
                    raise ValueError
                age_min = int(parts[0])
                age_max = int(parts[1])
                if not (13 <= age_min <= age_max <= 120):
                    raise ValueError
                update_data['age_min'] = age_min
                update_data['age_max'] = age_max
            except ValueError:
                await update.message.reply_text("Пожалуйста, введи корректный диапазон в формате: 20-30")
                return EDIT_FIELD

    db.update_user(user_id, **update_data)
    await update.message.reply_text("Данные обновлены!", reply_markup=ReplyKeyboardRemove())
    await main_menu(update, context)
    return ConversationHandler.END

async def skip_photo_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    db.update_user(user_id, photo_id=None)
    await update.message.reply_text("Фото удалено из профиля!", reply_markup=ReplyKeyboardRemove())
    await main_menu(update, context)
    return ConversationHandler.END

# --- Отзывы ---

async def review_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Введите username пользователя, о котором хотите оставить отзыв (например, @username):",
        reply_markup=ReplyKeyboardRemove()
    )
    return REVIEW_ENTER_TARGET

# async def review_enter_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     username = update.message.text.strip()
#     if not username.startswith('@'):
#         username = '@' + username
        
#     context.user_data['review_target'] = username
#     await update.message.reply_text(f"Напишите текст отзыва для {username}:")
#     return REVIEW_ENTER_TEXT

# async def review_enter_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text.strip()
#     username = context.user_data.get('review_target')
    
#     if not username:
#         await update.message.reply_text("Ошибка: не выбран пользователь.")
#         return ConversationHandler.END
    
#     if len(text) > 100:
#         await update.message.reply_text("Отзыв слишком длинный (максимум 100 символов). Пожалуйста, напишите короче:")
#         return REVIEW_ENTER_TEXT
    
    # author_id = update.message.from_user.id
    # print(f"Данные: username={username}, text={text}")
    # db.add_review(username, text)
    
    # await update.message.reply_text("Ваш отзыв сохранён!")
    # await main_menu(update, context)
    # return ConversationHandler.END

async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.from_user.username
    if not username:
        await update.message.reply_text("У вас нет username, отзывы недоступны.")
        await main_menu(update, context)
        return
    
    user_reviews = db.get_reviews(username)
    
    if not user_reviews:
        await update.message.reply_text("Отзывов о вас пока нет.")
    else:
        response = "📝 Отзывы о вас:\n\n"
        for i, review in enumerate(user_reviews, 1):
            response += f"{i}. {review}\n"
        await update.message.reply_text(response)
    
    await main_menu(update, context)
    return ConversationHandler.END

# --- Запуск бота ---

def main():
    application = Application.builder().token("8121277507:AAEvqSpC30D6kQzU1-ACkDgJ5FLomy7DKnc").build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu),
        ],
        states={
            CHOOSE_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_gender)],
            ENTER_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_age)],
            ENTER_ABOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_about)],
            CHOOSE_TARGET_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_target_gender)],
            ENTER_AGE_RANGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_age_range)],
            UPLOAD_PHOTO: [
                MessageHandler(filters.PHOTO, upload_photo),
                CommandHandler("skip", skip_photo)
            ],
            EDIT_CHOOSE_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_choose_field)],
            EDIT_FIELD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_field),
                MessageHandler(filters.PHOTO, edit_field),
                CommandHandler("skip", skip_photo_edit)
            ],
            # REVIEW_ENTER_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_enter_target)],
            # REVIEW_ENTER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_enter_text)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()

if __name__ == "__main__":
    main()
